/*
 * This is sample code generated by rpcgen.
 * These are only templates and you can use them
 * as a guideline for developing your own functions.
 */

#include "cajero.h"
#include "constants.h"
#include <string>
CLIENT * createClient(char * host) {
	CLIENT * clnt = clnt_create (host, CAJEROPROG, CAJEROVERSION, "udp");
	if (clnt == NULL) {
		clnt_pcreateerror (host);
		exit (1);
	}
	return clnt;
}

void
cajeroprog_1(char *host, int opt)
{
	CLIENT *clnt;
	int  *result_1;
	int  consultasaldo_1_arg;
	int  *result_2;
	cuenta_args  depositar_1_arg;
	int  *result_3;
	cuenta_args  retirar_1_arg;
	historico_t  *result_4;
	int  movimientos_1_arg;
	int  *result_5;
	int  crear_1_arg;

	clnt = clnt_create (host, CAJEROPROG, CAJEROVERSION, "udp");
	if (clnt == NULL) {
		clnt_pcreateerror (host);
		exit (1);
	}


	result_1 = consultasaldo_1(&consultasaldo_1_arg, clnt);
	if (result_1 == (int *) NULL) {
		clnt_perror (clnt, "call failed");
	}
	result_2 = depositar_1(&depositar_1_arg, clnt);
	if (result_2 == (int *) NULL) {
		clnt_perror (clnt, "call failed");
	}
	result_3 = retirar_1(&retirar_1_arg, clnt);
	if (result_3 == (int *) NULL) {
		clnt_perror (clnt, "call failed");
	}
	result_4 = movimientos_1(&movimientos_1_arg, clnt);
	if (result_4 == (historico_t *) NULL) {
		clnt_perror (clnt, "call failed");
	}
	result_5 = crear_1(&crear_1_arg, clnt);
	if (result_5 == (int *) NULL) {
		clnt_perror (clnt, "call failed");
	}

	clnt_destroy (clnt);

}


void crearCuenta(char *host, int nro) {
	CLIENT *clnt;
	clnt = createClient(host);

	int  * result = crear_1(&nro, clnt);
	if (result == (int *) NULL) {
		clnt_perror (clnt, "call failed");
	}
	if(*result == CUENTA_YA_EXISTE) {
		printf("La cuenta %d ya existe\n", nro);
	}
	if(*result == OPERACION_SUCCESS) {
		printf("Cuenta %d creada correctamente\n", nro);
	}


	clnt_destroy (clnt);
}


void consultarSaldo(char *host, int nro) {
	CLIENT *clnt;
	clnt = createClient(host);

	int  * result = consultasaldo_1(&nro, clnt);
	if (result == (int *) NULL) {
		clnt_perror (clnt, "call failed");
	}

	if(*result == CUENTA_INVALIDA) {
		printf("La cuenta %d no existe\n", nro);
	}
	if(*result >= 0) {
		printf("La cuenta %d tiene un saldo de %d\n", nro, *result);
	}


	clnt_destroy (clnt);
}


void depositar(char *host, int nro, int cant) {
	CLIENT *clnt;
	clnt = createClient(host);
	cuenta_args args;
	args.cuenta = nro;
	args.cantidad = cant;
	int  * result = depositar_1(&args, clnt);
	if (result == (int *) NULL) {
		clnt_perror (clnt, "call failed");
	}

	if(*result == CUENTA_INVALIDA) {
		printf("La cuenta %d no existe\n", nro);
	}
	if(*result >= 0) {
		printf("La cuenta %d tiene un saldo de %d\n", nro, *result);
	}

	clnt_destroy (clnt);
}

void retirar(char *host, int nro, int cant) {
	CLIENT *clnt;
	clnt = createClient(host);
	cuenta_args args;
	args.cuenta = nro;
	args.cantidad = cant;
	int  * result = retirar_1(&args, clnt);
	if (result == (int *) NULL) {
		clnt_perror (clnt, "call failed");
	}

	if(*result == CUENTA_INVALIDA) {
		printf("La cuenta %d no existe\n", nro);
	}

	if(*result == SALDO_INSUFICIENTE) {
		printf("La cuenta %d no tiene saldo suficiente\n", nro);
	}

	if(*result >= 0) {
		printf("La cuenta %d tiene un saldo de %d\n", nro, *result);
	}

	clnt_destroy (clnt);
}


void movimientos(char *host, int nro) {
	CLIENT *clnt;
	clnt = createClient(host);

	historico_t * result = movimientos_1(&nro, clnt);
	if (result == (historico_t *) NULL) {
		clnt_perror (clnt, "call failed");
	}

	if(result->result == CUENTA_INVALIDA) {
		printf("La cuenta %d no existe\n", nro);
	}

	if(result->result == OPERACION_SUCCESS) {
		for(int i = 0; i < result->movs.movimientos_t_len; i++) {
			std::string str(result->movs.movimientos_t_val[i].tipo == OP_DEPOSITO ? "DEP" : "SUS");
			printf("Operacion: %s              Cantidad: %d     \n",str.c_str(), result->movs.movimientos_t_val[i].cantidad);
		}
	}

	clnt_destroy (clnt);
}

int
main (int argc, char *argv[])
{
	char *host;
	if (argc < 2) {
		printf ("usage: %s server_host\n", argv[0]);
		exit (1);
	}
	int cuenta;
	int operacion;
	printf("Ingrese cuenta: \n");
	scanf("%d",&cuenta);
	printf("Ingrese operacion CREAR(1), CONSULTA(2), DEPOSITAR(3), RETIRAR(4), MOVIMIENTOS(5): \n");
	scanf("%d",&operacion);

	int cant;
	if(operacion == 3 || operacion == 4){
		printf("Ingrese cantidad: \n");
		scanf("%d",&cant);

	}

	host = argv[1];

	switch (operacion) {
		case 1:
			crearCuenta(host, cuenta);
			break;
		case 2:
			consultarSaldo(host,cuenta);
			break;
		case 3:
			depositar(host,cuenta,cant);
			break;
		case 4:
			retirar(host,cuenta,cant);
			break;
		case 5:
			movimientos(host,cuenta);
			break;
		default:
			break;
	}


exit (0);
}
